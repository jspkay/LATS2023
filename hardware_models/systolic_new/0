library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

package my_types is
	type signed_8bit_mat_t is array(natural range <>, natural range <>) of signed(0 to 7);
	type signed_8bit_arr_t is array (natural range <>) of signed(0 to 7);
	type signed_16bit_mat_t is array(natural range<>, natural range <>) of signed(0 to 15);
	-- type signed_8_bit_t is signed(0 to 7);
	-- subtype signed_16_bit_t is signed range 0 to 15);
end package my_types;

library ieee;
use ieee.std_logic_arith.all;
use ieee.std_logic_1164.all;
use work.my_types.all;

entity multiplicator is
	generic(
		r : positive := 4,
		n_bits : positive := 8);
	port(
		clk, rst : in std_logic;
		r_in : signed_8bit_arr_t(1 to r);
		c_in : signed_8bit_arr_t(1 to r);
		m : out signed_16bit_mat_t(1 to r, 1 to r) );
end multiplicator;

architecture behavior of multiplicator is
	--type signed_8bit_mat_t is array (1 to r) of array (1 to r) of std_logic_vector(0 to 7);

	signal clock, reset : std_logic := '0';
	signal r_mat, c_mat : signed_8bit_mat_t(1 to r, 1 to r);
	signal north_tmp, west_tmp, east_tmp, south_tmp : std_logic;
	component P is
		port(
			clk : in std_logic;
			north, west : in signed(0 to 7); -- signed_8bit_t;
			east, south : out signed(0 to 7); --signed_8bit_t;
			result : out signed(0 to 15); -- signed_8bit_t;
			reset : in std_logic );
	end component;

begin
 	rows_generate: 	for i in 1 to r generate
		cols_generate: for j in 1 to r generate
		
			P11 : if i=1 and j=1 generate
				P_mat : P port map(clock, c_in(1), r_in(1), r_mat(1,1), c_mat(1,1), m(i,j), reset); 
			end generate P11;

			P1j : if i=1 and j/=1 generate
				P_mat : P port map(clock, c_in(j), r_mat(1,j-1), r_mat(1,j), c_mat(1,j), m(i,j), reset); 
			end generate P1j;

	
			Pi1 : if i/=1 and j=1 generate
				P_mat : P port map(clock, c_mat(i-1,1), r_in(i), r_mat(i,1), c_mat(i,1), m(i,j), reset); 
			end generate Pi1;

		
			Pij : if i/=1 and j/=1 generate
				P_mat : P port map(clock, c_mat(i-1, j), r_mat(i, j-1), c_mat(i,j), r_mat(i,j), m(i,j), reset);
			end generate Pij;

			-- actually we should consider the last row and column so that we generate a processor P which has open connections, but it is pretty much the same as doing what we have done.

		end generate cols_generate;
	end generate rows_generate;

	open_connections : for i in 1 to r generate
		c_mat(4, i) <= open;
		r_mat(i, 4) <= open;
	end generate open_connections;	

process (clk) is
begin
	clock <= clk;
end process;
end behavior;
			
